package somecase;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.reflect.MethodSignature;
import org.springframework.core.LocalVariableTableParameterNameDiscoverer;

import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by liruibo on 2018/1/19.
 */
public class AOPMethodParamNameParamValueMapperUtil {

    /***
     * @describe 构造redis keylist
     *     根据参数名称的索引号 过滤参数值的map 待组合key的组合
     * @auther radish
     * @param point aop切入点
     * @return argName_argVal_Map  参数名称-参数值-map
     */
    public static Map<String, Object> getArgNameArgValMap(ProceedingJoinPoint point) {
        //构造method
        Method method = ((MethodSignature) point.getSignature()).getMethod();

        //根据索引号 构造参数名称参数值map
        return buildArgNameArgValMap(getParameterNames(method), point.getArgs());
    }


    /***
     * @describe 构造redis keylist
     *     根据参数名称的索引号 过滤参数值的map 待组合key的组合
     * @auther radish
     * @param argsNames  参数名称
     * @param argsNames 参数值
     * @return argName_argVal_Map  参数名称-参数值-map
     */
    private static Map<String, Object> buildArgNameArgValMap(String argsNames[], Object argsValues[]) {
        Map<String, Object> argName_argVal_Map = new HashMap<>();
        if (argsNames != null && argsNames.length > 0 && argsValues != null && argsValues.length > 0) {
            for (int i = 0; i < argsNames.length; i++) {
                argName_argVal_Map.put(argsNames[i], argsValues[i]);
            }
        }
        return argName_argVal_Map;
    }

    /***
     * @describe 获取参数名称
     * @auther radish
     * @param method 反射类的method对象
     *               java.lang.reflect.Method;
     * @return paramterNames 参数名称
     */
    private static String[] getParameterNames(Method method) {
        if (method != null) {
            LocalVariableTableParameterNameDiscoverer parameterNameDiscoverer = new LocalVariableTableParameterNameDiscoverer();
            return parameterNameDiscoverer.getParameterNames(method);
        }
        return null;
    }
}


